# Note: This is a composite GitHub Actions, it should do all env setup, caching an so on, so other pipelines can just compose their own stuff on top of that.
# Docs: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action

name: "Storm Software - Setup"
description: "A composite action configuration used across many Storm Software repos to setup: checkout, Node.js, a package manager, and npm registry configuration."
author: "sullivanpj"

branding:
  icon: "package"
  color: "gray-dark"

inputs:
  working-directory:
    description: "The working directory of your node package"
    required: false
    default: ./
  package-manager:
    description: Package manager
    required: true
    default: pnpm
  package-manager-version:
    description: Package manager version
    required: true
    default: 9.10.0
  ignore-scripts:
    description: Whether to ignore scripts during installation
    required: true
    default: N
  storm-bot:
    description: The github username of the Storm bot
    required: true
    default: Stormie-Bot
  storm-bot-github-token:
    description: The github token of the Storm bot
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      name: Checkout [Pull Request]
      if: ${{ github.event_name == 'pull_request' }}
      with:
        # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
        ref: ${{ github.event.pull_request.head.sha }}
        # We need to fetch all branches and commits so that Nx affected has a base to compare against.
        fetch-depth: 0
        token: ${{ inputs.storm-bot-github-token }}

    - uses: actions/checkout@v4
      name: Checkout [Default Branch]
      if: ${{ github.event_name != 'pull_request' }}
      with:
        # We need to fetch all branches and commits so that Nx affected has a base to compare against.
        fetch-depth: 0
        token: ${{ inputs.storm-bot-github-token }}

    - name: Check pnpm version
      shell: bash
      id: pnpm
      if: inputs.package-manager == 'pnpm'
      working-directory: ${{ inputs.working-directory }}
      run: |
        PNPM_VERSION=${PNPM_VERSION:-7.30.5}
        PKG_JSON=$(cat package.json | jq -r '.packageManager' | awk -F@ '{print $2}')
        if [ ! -z $PKG_JSON ]; then
          PNPM_VERSION=$PKG_JSON
        fi
        if [ ! -z {{inputs.package-manager}} ]; then
          PNPM_VERSION=${{ inputs.package-manager-version }}
        fi
        echo "Using PNPM version $PNPM_VERSION"
        echo "version=$PNPM_VERSION" >> $GITHUB_OUTPUT

    - name: Setup ${{ inputs.package-manager }}
      id: pnpm_setup
      if: inputs.package-manager == 'pnpm'
      uses: pnpm/action-setup@v4.1.0
      with:
        version: ${{ steps.pnpm.outputs.version }}
        run_install: false
        package_json_file: ${{ inputs.working-directory }}/package.json

    # - name: Install Nx-Cloud CLI
    #   shell: bash
    #   if: inputs.package-manager == 'pnpm'
    #   run: pnpm i nx-cloud -g
    #   working-directory: ${{ inputs.working-directory }}

    # - name: Start Nx Cloud CI run
    #   shell: bash
    #   if: inputs.package-manager == 'pnpm'
    #   run: pnpm exec nx-cloud start-ci-run --distribute-on=".nx/workflows/dynamic-changesets.yaml"
    #   working-directory: ${{ inputs.working-directory }}

    # - name: setup node
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: ${{ inputs.nodeVersion }}
    #     cache: ${{ inputs.package-manager }}
    #     cache-dependency-path: |
    #       **/pnpm-lock.yaml
    #       **/yarn.lock
    #       patches/**

    - name: Restore cached npm dependencies
      id: cache-dependencies-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          node_modules
          ~/.cache/Cypress # needed for the Cypress binary
        key: npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}

    - name: Install yarn package manager
      shell: bash
      if: inputs.package-manager == 'yarn' && inputs.package-manager-version == ''
      run: yarn install --ignore-engines --frozen-lockfile --immutable
      working-directory: ${{ inputs.working-directory }}

    - name: Install modern yarn package manager
      shell: bash
      if: inputs.package-manager == 'yarn' && inputs.package-manager-version == 'modern'
      run: corepack enable && yarn
      working-directory: ${{ inputs.working-directory }}

    - name: Install pnpm package manager
      shell: bash
      if: inputs.package-manager == 'pnpm' && inputs.ignore-scripts != 'Y' && inputs.ignore-scripts != 'y'
      run: pnpm install --no-frozen-lockfile
      working-directory: ${{ inputs.working-directory }}

    - name: Install pnpm package manager - Ignore scripts
      shell: bash
      if: inputs.package-manager == 'pnpm' && (inputs.ignore-scripts == 'Y' || inputs.ignore-scripts == 'y')
      run: pnpm install --no-frozen-lockfile --ignore-scripts
      working-directory: ${{ inputs.working-directory }}

    - name: Get pnpm store directory
      if: inputs.package-manager == 'pnpm'
      shell: bash
      id: pnpm-cache
      run: |
        echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: Set up npm registry
      uses: actions/setup-node@v4
      if: inputs.package-manager == 'pnpm'
      with:
        registry-url: https://registry.npmjs.org/
        node-version-file: .github/.nvmrc
        cache: pnpm
        cache-dependency-path: pnpm-lock.yaml

    - name: Setup pnpm config registry
      if: inputs.package-manager == 'pnpm'
      run: pnpm config set registry https://registry.npmjs.org
      shell: bash

    - name: Cache npm dependencies
      id: cache-dependencies-save
      uses: actions/cache/save@v4
      with:
        path: |
          node_modules
          ~/.cache/Cypress # needed for the Cypress binary
        key: ${{ steps.cache-dependencies-restore.outputs.cache-primary-key }}

    - name: Configure git
      run: |
        git config user.name "${{ inputs.storm-bot }}"
        git config user.email "bot@stormsoftware.com"
        git config lfs.allowincompletepush true
        git config --global init.defaultBranch main
        npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
      shell: bash
      
    # - name: Track the default branch
    #   run: git branch --track main origin/main
    #   shell: bash

